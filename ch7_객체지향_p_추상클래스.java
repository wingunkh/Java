/*
	[추상클래스]
	: 클래스를 설계도에 비유한다면, 추상클래스는 미완성 설계도에 비유할 수 있다.
	추상클래스는 미완성 메서드(추상메서드)를 포함하고 있는 클래스이다.
	
	- 추상클래스로는 인스턴스를 생성할 수 없으며, 상속을 통해서 자식클래스에 의해서만 완성될 수 있다.
	- 추상클래스에도 생성자가 있으며, 멤버변수와 메서드도 가질 수 있다.
	- 추상클래스는 키워드 'abstract'를 붙이기만 하면 된다.
	
	[추상메서드]
	: 선언부만 작성하고 구현부는 작성하지 않은 채로 남겨둔 것이 추상메서드이다.
	(메서드를 이와같이 미완성 상태로 남겨두는 이유는 메서드의 내용이 상속받는 클래스에 따라 달라질 수 있기 때문에
	부모클래스에서는 선언부만을 작성하고, 주석을 덧붙여 어떤 기능을 수행할 목적으로 작성되었는지 알려주고, 실제 내용은 상속받는 클래스에서 구현하도록 비워두는 것이다.)
	
	- 추상클래스로부터 상속받는 자식클래스는 오버라이딩을 통해 부모인 추상클래스의 추상메서드를 모두 구현해주어야 한다.
	(하나라도 구현하지 않는다면, 자식클래스 역시 추상클래스로 지정해 주어야 한다.)
	- 추상메서드 역시 키워드 'abstract'를 앞에 붙여주고, 구현부가 없으므로 괄호 {}대신 문장의 끝을 알리는 ';'를 적어준다.
	
	[추상화와 구체화]
	추상화: 클래스간의 공통점을 찾아내서 공통의 부모를 만드는 작업
	구체화: 상속을 통해 클래스르 구현, 확장하는 작업
*/

abstract class Unit{
	int x,y;
	abstract void move(int x, int y);
	void stop() {/* 현재 위치에 정지 */}
}

class Marine extends Unit{
	void move(int x, int y) {/* 지정된 위치로 이동 */} //추상메서드를 오버라이딩 하지 않을 시 에러 발생.
	void stimPack() {}
}

class Tank extends Unit{
	void move(int x, int y) {/* 지정된 위치로 이동 */}
	void changeMode() {}
}

public class ch7_객체지향_p_추상클래스 {
	public static void main(String[] args) {
		Unit[] group=new Unit[2];
		group[0]=new Marine();
		group[1]=new Tank();
		/* 다형성에서 배웠듯이 부모클래스 타입의 참조변수로 자식클래스의 인스턴스를 참조하는 것이 가능하기 때문에
		이처럼 부모클래스 타입의 배열에 자손클래스의 인스턴스를 담을 수 있다. */
		
		for(int i=0;i<group.length;i++) {
			group[i].move(100,200);
			//Unit클래스에 move메서드가 비록 추상메서드로 정의되어 있다 하다라도 이처럼 Unit클래스 타입의 참조변수로 move메서드를 호출하는 것이 가능하다.
			//메서드는 참조변수의 타입에 관계없이 실제 인스턴스에 구현된 것이 호출되기 때문이다.
		}
	}
}